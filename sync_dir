#! /usr/bin/env bash

set -eu

PATH="$(dirname "$(readlink -e "$0")"):$PATH"

while getopts "b:c:not" opt; do
    case $opt in
        b)
            # TODO check if number
            declare -r BATCH_SIZE=$OPTARG;;
        c )
            # each OPTARG for "c" is expected to be a valid string of find checks
            candidate_checks="${candidate_checks+$candidate_checks} $OPTARG";;
        n )
            declare -r MODE=n
            echo "[INFO] Collecting candidates from files newer than last run" >&2;;
        o )
            declare -r MODE=o
            echo "[INFO] Collecting candidates from files older than last run" >&2;;
        t )
            declare -r TEST_ONLY=
            echo "[WARNING] Dry run" >&2;;
	esac
done
shift $(expr $OPTIND - 1 )

if ! [[ -v MODE ]]; then
    echo ="[ERROR] No mode given: one of -n or -o required" >&2
    exit 1
fi

if [[ -v candidate_checks ]]; then
    declare -r CANDIDATE_CHECKS=$candidate_checks
else 
    echo "[ERROR] No candidate checks given" >&2
    exit 1
fi

declare -r SOURCE_DIRECTORY="$(readlink -e "${1:-}")"
if [[ -z $SOURCE_DIRECTORY ]]; then
    echo "[ERROR] No source directory ${1:-}" >&2
    exit 1 
fi
declare -r TARGET=${2:-}
if ! [[ $TARGET =~ s3://[a-zA-Z0-9\./] ]]; then
    echo "[ERROR] Target $TARGET is no valid s3 url" >&2
    exit 1
fi


print_duration() {
    local mins secs
    ((mins=${SECONDS}/60))
    ((secs=${SECONDS}%60))
    if [[ $mins != 0 ]]; then
        echo "$mins minutes $secs seconds"
    else 
        echo "$secs seconds"
    fi
}

collect_older_candidates() {
    local -r synced_list=$(mktemp)
    s3cmd -r ls "$TARGET" |\
        sed -r 's|([0-9-]+ [0-9:]+)[[:space:]]+([0-9]+)[[:space:]]+'"$TARGET"'/(.+)|\3|' > "$synced_list"
    find "$SOURCE_DIRECTORY" -type f ${CANDIDATE_CHECKS+$CANDIDATE_CHECKS} \
        ! -newer "$LAST_RUN_TIMESTAMP" -printf '%P\n' |\
        while read file; do
            grep -q "$file" "$synced_list" || echo "$file"
        done
    rm "$synced_list"
}

collect_newer_candidates() {
    find "$SOURCE_DIRECTORY" -type f ${CANDIDATE_CHECKS+$CANDIDATE_CHECKS} \
        -newer "$LAST_RUN_TIMESTAMP" -printf '%P\n'
}

get_last_run_ts_file()  {
    local -r ts_file_dir=$(readlink -m "$HOME/.local/share/backup-scripts")
    if ! [[ -e $ts_file_dir ]]; then
        mkdir --parents "$ts_file_dir"
    fi
    local -r ts_file="$ts_file_dir/last_run_ts"
    if ! [[ -e $ts_file ]]; then
        touch "$ts_file"
    fi
    echo "$ts_file"
}



declare -r LAST_RUN_TIMESTAMP=$(get_last_run_ts_file)

case $MODE in
    o )
        declare -r CANDIDATES=$(collect_older_candidates | sort);;
    n )
        declare -r CANDIDATES=$(collect_newer_candidates | sort);;
esac 

if [[ -z $CANDIDATES ]]; then
    echo "[INFO] No candidates found for sync" >&2
    exit
fi 

if [[ -v BATCH_SIZE ]]; then
    declare -r SYNC_CANDIDATES=$(head -n "$BATCH_SIZE" <<<"$CANDIDATES")
else    
    declare -r SYNC_CANDIDATES=$CANDIDATES
fi

if [[ -v TEST_ONLY ]]; then
    echo "$SYNC_CANDIDATES"
    exit
fi

# about "--exclude" - to restrict to only the files we pass via "--files-from", we must first exclude all
# about "--no-check-md5" - s3cmd will compare found files that are older than $INITIAL_SYNC_START_TSFILE with uploaded once
#   and maybe wrongly detect "identical" files (identity based on md5 checksums). 
#   (this might also make things faster because checksums must not be produced/fetched)
#   from: https://stackoverflow.com/a/28188553/1295519
declare -r S3CMD_OPTS="--no-check-md5 --acl-private --no-progress --skip-existing --preserve --exclude '*'"
# about "\x27" in sed pattern - placeholder for single quote
synced_files=$(s3cmd $S3CMD_OPTS --files-from - sync "$SOURCE_DIRECTORY" "$TARGET" <<<"$SYNC_CANDIDATES" 2>&1 |\
    sed -r -n 's/^upload: \x27(.+)\x27 -> \x27s3:.+\x27.*/\1/p')        

# older mode should not touch LAST_RUN_TIMESTAMP: I have a fear that this might lead to newer files not picked up for
# syncing...
if [[ $MODE = "n" ]]; then
    touch "$LAST_RUN_TIMESTAMP"    
fi

candidates_count=$(wc -l <<<"$SYNC_CANDIDATES")

if [[ -z $synced_files ]]; then
    echo "[WARN] No files were synced (but there were $candidates_count candidates)" >&2
    exit 1
fi

synced_count=$(wc -l <<<"$synced_files")      

if [[ $candidates_count != $synced_count ]]; then
    echo "[WARN] Found $candidates_count candidates but $synced_count were synced" >&2
fi

echo "$synced_files"
echo "[INFO] Synced $synced_count file(s) in $(print_duration)" >&2