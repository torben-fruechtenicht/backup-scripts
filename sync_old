#! /usr/bin/env bash

set -eu

PATH="$(dirname "$(readlink -e "$0")"):$PATH"

declare -r SOURCE_DIRECTORY="$(readlink -e "${1:-}")"
if [[ -z $SOURCE_DIRECTORY ]]; then
    echo "No source directory ${1:-}" >&2
    exit 1 
fi
declare -r TARGET=${2:-}
if ! [[ $TARGET =~ s3://[a-zA-Z0-9\./] ]]; then
    echo "Target $TARGET is no valid s3 url" >&2
    exit 1
fi

declare -r APPDATA_DIR=$(readlink -e "$HOME/.local/share/backup-scripts")
if [[ -z $APPDATA_DIR ]]; then
    echo "[INFO] App data directory $HOME/.local/share/backup-scripts does not exist, creating it" >&2
    mkdir --parents "$HOME/.local/share/backup-scripts"
fi

declare -r INITIAL_SYNC_START_TSFILE=$(readlink -f "$APPDATA_DIR/initial_sync_start_ts")
if ! [[ -e $INITIAL_SYNC_START_TSFILE ]]; then
    echo "[INFO] Initial sync start timestamp file $INITIAL_SYNC_START_TSFILE does not exist, creating it" >&2
    touch "$INITIAL_SYNC_START_TSFILE"
fi


declare -r SYNCED_LIST=$(mktemp)
function cleanup() {
    test -e "$SYNCED_LIST" && rm -f "$SYNCED_LIST"
}
trap cleanup EXIT


print_duration() {
    local mins secs
    ((mins=${SECONDS}/60))
    ((secs=${SECONDS}%60))
    if [[ $mins != 0 ]]; then
        echo "$mins minutes $secs seconds"
    else 
        echo "$secs seconds"
    fi
}


# TODO allow callers to pass a list of allowed paths

declare -r BATCH_SIZE=100

s3cmd -r ls "$TARGET" | sed -r 's|([0-9-]+ [0-9:]+)[[:space:]]+([0-9]+)[[:space:]]+'"$TARGET"'/(.+)|\3|' > "$SYNCED_LIST"
declare -r CANDIDATES=$(find "$SOURCE_DIRECTORY" -type f -path '*/converted/*.jpg' ! -newer "$INITIAL_SYNC_START_TSFILE" -printf '%P\n' |\
    while read file; do
        grep -q "$file" "$SYNCED_LIST" || echo "$file"
    done | sort -u | head -n "$BATCH_SIZE")
candidates_count=$(wc -l <<<"$CANDIDATES")    

# about "--exclude" - to restrict to only the files we pass via "--files-from", we must first exclude all
# about "--no-check-md5" - s3cmd will compare found files that are older than $INITIAL_SYNC_START_TSFILE with uploaded once
#   and maybe wrongly detect "identical" files (identity based on md5 checksums). 
#   (this might also make things faster because checksums must not be produced/fetched)
#   from: https://stackoverflow.com/a/28188553/1295519
declare -r S3CMD_OPTS="--no-check-md5 --acl-private --no-progress --skip-existing --preserve --exclude '*'"
# about "\x27" in sed pattern - single quote
sync_out=$(s3cmd $S3CMD_OPTS --files-from - sync "$SOURCE_DIRECTORY" "$TARGET" <<<"$CANDIDATES" 2>&1 |\
    sed -r -n 's/^upload: \x27(.+)\x27 -> \x27s3:.+\x27.*/\1/p')        
synced_count=$(wc -l <<<"$sync_out")    

if [[ $candidates_count != $synced_count ]]; then
    echo "[WARN] Found $candidates_count candidates but $synced_count were synced" >&2
fi

echo "$sync_out"
echo "[INFO] Synced $synced_count file(s) in $(print_duration)" >&2